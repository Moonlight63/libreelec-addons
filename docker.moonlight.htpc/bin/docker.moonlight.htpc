#!/bin/sh

. /etc/profile
oe_setup_addon docker.moonlight.htpc
. $ADDON_DIR/bin/docker.htpc.setup
# echo $ADDON_DIR

find $ADDON_DIR/configs -name '*.sh' -exec chmod +x {} \;

case $1 in
  'start')

    while (! docker stats --no-stream ); do
      echo "Waiting for Docker"
      sleep 2
    done


    echo "Creating network"
    docker network create --driver bridge htpc || true


    if [ "$start_plex" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.plex.service"
    fi
    if [ "$start_jellyfin" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.jellyfin.service"
    fi
    if [ "$start_sonarr" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.sonarr.service"
    fi
    if [ "$start_radarr" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.radarr.service"
    fi
    if [ "$start_bazarr" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.bazarr.service"
    fi
    if [ "$start_prowlarr" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.prowlarr.service"
    fi
    if [ "$start_overseerr" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.overseerr.service"
    fi
    if [ "$start_ombi" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.ombi.service"
    fi

    if [ "$start_transmission" = "true" ]; then
      if [ "$use_vpn" = "true" ]; then
        systemctl enable "${ADDON_DIR}/system.d/docker.haugene.transmission.service"
        systemctl enable "${ADDON_DIR}/system.d/docker.transmission.proxy.service"
      else
        systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.transmission.service"
      fi
    fi

    if [ "$start_qbit" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.guillaumedsde.qbittorrent.service"
    fi

    if [ "$start_muximux" = "true" ]; then
      systemctl enable "${ADDON_DIR}/system.d/docker.linuxserver.muximux.service"
    fi

    systemctl enable "${ADDON_DIR}/system.d/docker.uilton.sonarrscanner.service"


    chmod +x "${ADDON_DIR}/bin"/*


    if [ "$start_plex" = "true" ]; then
      systemctl start "docker.linuxserver.plex.service"
    fi
    if [ "$start_jellyfin" = "true" ]; then
      systemctl start "docker.linuxserver.jellyfin.service"
    fi
    if [ "$start_sonarr" = "true" ]; then
      systemctl start "docker.linuxserver.sonarr.service"
    fi
    if [ "$start_radarr" = "true" ]; then
      systemctl start "docker.linuxserver.radarr.service"
    fi
    if [ "$start_bazarr" = "true" ]; then
      systemctl start "docker.linuxserver.bazarr.service"
    fi
    if [ "$start_prowlarr" = "true" ]; then
      systemctl start "docker.linuxserver.prowlarr.service"
    fi
    if [ "$start_overseerr" = "true" ]; then
      systemctl start "docker.linuxserver.overseerr.service"
    fi
    if [ "$start_ombi" = "true" ]; then
      systemctl start "docker.linuxserver.ombi.service"
    fi

    if [ "$start_transmission" = "true" ]; then
      if [ "$use_vpn" = "true" ]; then
        systemctl start "docker.haugene.transmission.service"
        systemctl start "docker.transmission.proxy.service"
      else
        systemctl start "docker.linuxserver.transmission.service"
      fi
    fi

    if [ "$start_qbit" = "true" ]; then
      systemctl start "docker.guillaumedsde.qbittorrent.service"
    fi

    if [ "$start_muximux" = "true" ]; then
      systemctl start "docker.linuxserver.muximux.service"
    fi

    systemctl start "docker.uilton.sonarrscanner.service"

    

    ;;
  'stop')
    systemctl stop "docker.linuxserver.plex.service"
    systemctl stop "docker.linuxserver.jellyfin.service"
    systemctl stop "docker.linuxserver.sonarr.service"
    systemctl stop "docker.linuxserver.radarr.service"
    systemctl stop "docker.linuxserver.bazarr.service"
    systemctl stop "docker.linuxserver.prowlarr.service"
    systemctl stop "docker.linuxserver.overseerr.service"
    systemctl stop "docker.linuxserver.ombi.service"
    systemctl stop "docker.uilton.sonarrscanner.service"
    systemctl stop "docker.linuxserver.muximux.service"

    systemctl stop "docker.haugene.transmission.service"
    systemctl stop "docker.transmission.proxy.service"
    systemctl stop "docker.linuxserver.transmission.service"

    systemctl stop "docker.guillaumedsde.qbittorrent.service"


    systemctl disable "docker.linuxserver.plex.service"
    systemctl disable "docker.linuxserver.jellyfin.service"
    systemctl disable "docker.linuxserver.bazarr.service"
    systemctl disable "docker.linuxserver.sonarr.service"
    systemctl disable "docker.linuxserver.radarr.service"
    systemctl disable "docker.linuxserver.prowlarr.service"
    systemctl disable "docker.linuxserver.overseerr.service"
    systemctl disable "docker.linuxserver.ombi.service"
    systemctl disable "docker.uilton.sonarrscanner.service"
    systemctl disable "docker.linuxserver.muximux.service"

    systemctl disable "docker.haugene.transmission.service"
    systemctl disable "docker.transmission.proxy.service"
    systemctl disable "docker.linuxserver.transmission.service"

    systemctl disable "docker.guillaumedsde.qbittorrent.service"

    echo "Removing Network"
    docker network rm htpc
    ;;
  'reload')

    if [ "$start_plex" = "true" ]; then
      systemctl restart "docker.linuxserver.plex.service"
    fi
    if [ "$start_jellyfin" = "true" ]; then
      systemctl restart "docker.linuxserver.jellyfin.service"
    fi
    if [ "$start_sonarr" = "true" ]; then
      systemctl restart "docker.linuxserver.sonarr.service"
    fi
    if [ "$start_radarr" = "true" ]; then
      systemctl restart "docker.linuxserver.radarr.service"
    fi
    if [ "$start_bazarr" = "true" ]; then
      systemctl restart "docker.linuxserver.bazarr.service"
    fi
    if [ "$start_prowlarr" = "true" ]; then
      systemctl restart "docker.linuxserver.prowlarr.service"
    fi
    if [ "$start_overseerr" = "true" ]; then
      systemctl restart "docker.linuxserver.overseerr.service"
    fi
    if [ "$start_ombi" = "true" ]; then
      systemctl restart "docker.linuxserver.ombi.service"
    fi

    if [ "$start_transmission" = "true" ]; then
      if [ "$use_vpn" = "true" ]; then
        systemctl restart "docker.haugene.transmission.service"
        systemctl restart "docker.transmission.proxy.service"
      else
        systemctl restart "docker.linuxserver.transmission.service"
      fi
    fi

    if [ "$start_qbit" = "true" ]; then
      systemctl restart "docker.guillaumedsde.qbittorrent.service"
    fi

    if [ "$start_muximux" = "true" ]; then
      systemctl restart "docker.linuxserver.muximux.service"
    fi

    systemctl restart "docker.uilton.sonarrscanner.service"

    ;;
  *)
esac